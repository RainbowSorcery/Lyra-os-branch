[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_font
[FILE "graphic.c"]
[SECTION .text]
	ALIGN	2
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	CALL	_io_load_eflags
	MOV	DWORD [-8+EBP],EAX
	CALL	_io_cli
	SUB	ESP,8
	PUSH	DWORD [8+EBP]
	PUSH	968
	CALL	_io_out8
	ADD	ESP,16
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-4+EBP],EAX
L2:
	MOV	EAX,DWORD [-4+EBP]
	CMP	EAX,DWORD [12+EBP]
	JLE	L5
	JMP	L3
L5:
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	INC	EAX
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,2
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	LEA	EAX,DWORD [16+EBP]
	ADD	DWORD [EAX],3
	LEA	EAX,DWORD [-4+EBP]
	INC	DWORD [EAX]
	JMP	L2
L3:
	SUB	ESP,12
	PUSH	DWORD [-8+EBP]
	CALL	_io_store_eflags
	ADD	ESP,16
	LEAVE
	RET
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-103
	DB	-35
	DB	-52
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-74
	DB	-93
	DB	-68
[SECTION .text]
	ALIGN	2
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	SUB	ESP,4
	PUSH	_table_rgb.0
	PUSH	16
	PUSH	0
	CALL	_set_palette
	ADD	ESP,16
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_boxfill8
_boxfill8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,12
	MOV	EAX,DWORD [28+EBP]
	MOV	BYTE [-1+EBP],AL
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [-8+EBP],EAX
L8:
	MOV	EAX,DWORD [-8+EBP]
	CMP	EAX,DWORD [24+EBP]
	JL	L11
	JMP	L7
L11:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [-12+EBP],EAX
L12:
	MOV	EAX,DWORD [-12+EBP]
	CMP	EAX,DWORD [20+EBP]
	JL	L15
	JMP	L10
L15:
	MOV	EDX,DWORD [-8+EBP]
	MOV	EAX,EDX
	SAL	EAX,2
	ADD	EAX,EDX
	SAL	EAX,6
	ADD	EAX,DWORD [-12+EBP]
	MOV	EDX,EAX
	ADD	EDX,DWORD [8+EBP]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
	LEA	EAX,DWORD [-12+EBP]
	INC	DWORD [EAX]
	JMP	L12
L10:
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L8
L7:
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_putfont8
_putfont8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,12
	MOV	EAX,DWORD [24+EBP]
	MOV	BYTE [-1+EBP],AL
	MOV	DWORD [-8+EBP],0
L17:
	CMP	DWORD [-8+EBP],15
	JLE	L20
	JMP	L16
L20:
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [28+EBP]
	MOV	AL,BYTE [EAX]
	MOV	BYTE [-9+EBP],AL
	MOV	AL,-128
	AND	AL,BYTE [-9+EBP]
	TEST	AL,AL
	JE	L21
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	MOV	EDX,EAX
	ADD	EDX,DWORD [8+EBP]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L21:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,64
	TEST	AL,AL
	JE	L22
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [1+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L22:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,32
	TEST	AL,AL
	JE	L23
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [2+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L23:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,16
	TEST	AL,AL
	JE	L24
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [3+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L24:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,8
	TEST	AL,AL
	JE	L25
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [4+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L25:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,4
	TEST	AL,AL
	JE	L26
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [5+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L26:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,2
	TEST	AL,AL
	JE	L27
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [6+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L27:
	MOV	AL,BYTE [-9+EBP]
	AND	EAX,1
	TEST	AL,AL
	JE	L19
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EDX,DWORD [7+EAX]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L19:
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L17
L16:
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	SUB	ESP,8
	PUSH	15
	PUSH	180
	PUSH	DWORD [12+EBP]
	PUSH	0
	PUSH	0
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	8
	PUSH	200
	PUSH	DWORD [12+EBP]
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,20
	PUSH	EAX
	PUSH	0
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	7
	PUSH	182
	PUSH	DWORD [12+EBP]
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,19
	PUSH	EAX
	PUSH	0
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	7
	PUSH	186
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,280
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,15
	PUSH	EAX
	PUSH	2
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	14
	PUSH	195
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,280
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,6
	PUSH	EAX
	PUSH	3
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	7
	PUSH	195
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,317
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,15
	PUSH	EAX
	PUSH	2
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	0
	PUSH	196
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,279
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,15
	PUSH	EAX
	PUSH	40
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	0
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,124
	PUSH	EAX
	PUSH	40
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	PUSH	2
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,8
	PUSH	5
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,123
	PUSH	EAX
	PUSH	40
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,6
	PUSH	EAX
	PUSH	40
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_putfonts8_asc
_putfonts8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	MOV	EAX,DWORD [24+EBP]
	MOV	BYTE [-1+EBP],AL
L31:
	MOV	EAX,DWORD [28+EBP]
	CMP	BYTE [EAX],0
	JNE	L34
	JMP	L30
L34:
	SUB	ESP,8
	MOV	EAX,DWORD [28+EBP]
	MOV	AL,BYTE [EAX]
	AND	EAX,255
	SAL	EAX,4
	ADD	EAX,_font
	PUSH	EAX
	MOVSX	EAX,BYTE [-1+EBP]
	PUSH	EAX
	PUSH	DWORD [20+EBP]
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,32
	LEA	EAX,DWORD [16+EBP]
	ADD	DWORD [EAX],8
	LEA	EAX,DWORD [28+EBP]
	INC	DWORD [EAX]
	JMP	L31
L30:
	LEAVE
	RET
