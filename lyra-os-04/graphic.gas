	.file	"graphic.c"
	.text
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	call	_io_load_eflags
	movl	%eax, -8(%ebp)
	call	_io_cli
	subl	$8, %esp
	pushl	8(%ebp)
	pushl	$968
	call	_io_out8
	addl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, -4(%ebp)
L2:
	movl	-4(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	L5
	jmp	L3
L5:
	subl	$8, %esp
	movl	16(%ebp), %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	incl	%eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	addl	$2, %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	leal	16(%ebp), %eax
	addl	$3, (%eax)
	leal	-4(%ebp), %eax
	incl	(%eax)
	jmp	L2
L3:
	subl	$12, %esp
	pushl	-8(%ebp)
	call	_io_store_eflags
	addl	$16, %esp
	leave
	ret
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-103
	.byte	-35
	.byte	-52
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-74
	.byte	-93
	.byte	-68
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	pushl	$_table_rgb.0
	pushl	$16
	pushl	$0
	call	_set_palette
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _boxfill8
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
_boxfill8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	28(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -8(%ebp)
L8:
	movl	-8(%ebp), %eax
	cmpl	24(%ebp), %eax
	jl	L11
	jmp	L7
L11:
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
L12:
	movl	-12(%ebp), %eax
	cmpl	20(%ebp), %eax
	jl	L15
	jmp	L10
L15:
	movl	-8(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$6, %eax
	addl	-12(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L12
L10:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L8
L7:
	leave
	ret
	.balign 2
.globl _putfont8
	.def	_putfont8;	.scl	2;	.type	32;	.endef
_putfont8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	$0, -8(%ebp)
L17:
	cmpl	$15, -8(%ebp)
	jle	L20
	jmp	L16
L20:
	movl	-8(%ebp), %eax
	addl	28(%ebp), %eax
	movb	(%eax), %al
	movb	%al, -9(%ebp)
	movb	$-128, %al
	andb	-9(%ebp), %al
	testb	%al, %al
	je	L21
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L21:
	movb	-9(%ebp), %al
	andl	$64, %eax
	testb	%al, %al
	je	L22
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	1(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L22:
	movb	-9(%ebp), %al
	andl	$32, %eax
	testb	%al, %al
	je	L23
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	2(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L23:
	movb	-9(%ebp), %al
	andl	$16, %eax
	testb	%al, %al
	je	L24
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	3(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L24:
	movb	-9(%ebp), %al
	andl	$8, %eax
	testb	%al, %al
	je	L25
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	4(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L25:
	movb	-9(%ebp), %al
	andl	$4, %eax
	testb	%al, %al
	je	L26
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	5(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L26:
	movb	-9(%ebp), %al
	andl	$2, %eax
	testb	%al, %al
	je	L27
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	6(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L27:
	movb	-9(%ebp), %al
	andl	$1, %eax
	testb	%al, %al
	je	L19
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	16(%ebp), %eax
	addl	8(%ebp), %eax
	leal	7(%eax), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L19:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L17
L16:
	leave
	ret
	.balign 2
.globl _init_screen
	.def	_init_screen;	.scl	2;	.type	32;	.endef
_init_screen:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$8, %esp
	pushl	$15
	pushl	$180
	pushl	12(%ebp)
	pushl	$0
	pushl	$0
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$8
	pushl	$200
	pushl	12(%ebp)
	movl	16(%ebp), %eax
	subl	$20, %eax
	pushl	%eax
	pushl	$0
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$7
	pushl	$182
	pushl	12(%ebp)
	movl	16(%ebp), %eax
	subl	$19, %eax
	pushl	%eax
	pushl	$0
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$7
	pushl	$186
	movl	12(%ebp), %eax
	subl	$280, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$15, %eax
	pushl	%eax
	pushl	$2
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$14
	pushl	$195
	movl	12(%ebp), %eax
	subl	$280, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$6, %eax
	pushl	%eax
	pushl	$3
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$7
	pushl	$195
	movl	12(%ebp), %eax
	subl	$317, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$15, %eax
	pushl	%eax
	pushl	$2
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$0
	pushl	$196
	movl	12(%ebp), %eax
	subl	$279, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$15, %eax
	pushl	%eax
	pushl	$40
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$0
	movl	12(%ebp), %eax
	subl	$124, %eax
	pushl	%eax
	pushl	$40
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	pushl	$2
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$8, %esp
	pushl	$5
	movl	12(%ebp), %eax
	subl	$123, %eax
	pushl	%eax
	pushl	$40
	movl	16(%ebp), %eax
	subl	$6, %eax
	pushl	%eax
	pushl	$40
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	leave
	ret
	.balign 2
.globl _putfonts8_asc
	.def	_putfonts8_asc;	.scl	2;	.type	32;	.endef
_putfonts8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
L31:
	movl	28(%ebp), %eax
	cmpb	$0, (%eax)
	jne	L34
	jmp	L30
L34:
	subl	$8, %esp
	movl	28(%ebp), %eax
	movb	(%eax), %al
	andl	$255, %eax
	sall	$4, %eax
	addl	$_font, %eax
	pushl	%eax
	movsbl	-1(%ebp),%eax
	pushl	%eax
	pushl	20(%ebp)
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putfont8
	addl	$32, %esp
	leal	16(%ebp), %eax
	addl	$8, (%eax)
	leal	28(%ebp), %eax
	incl	(%eax)
	jmp	L31
L30:
	leave
	ret
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
